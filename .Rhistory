covid_cases <- lapply(covid_cases, function(df) {
df <- df[complete.cases(df), ]
df
})
# merge covid_cases
covid_cases <- covid_cases %>% reduce(left_join, by = c("Country", "Date"))
# merge covid_cases and testing on Country and Date
covid_cases <- merge(covid_cases, testing, by = c("Country", "Date"), all = TRUE)
pop <-  WDI(country = "all", indicator = c("Population" = "SP.POP.TOTL"), start = 2010, end = 2019)
perc65 <-  WDI(country = "all", indicator = c("Over65_perc" = "SP.POP.65UP.TO.ZS"), start = 2010, end = 2019)
perc80f <-  WDI(country = "all", indicator = c("Over80F_percf" = "SP.POP.80UP.FE.5Y"), start = 2010, end = 2019)
perc80m <-  WDI(country = "all", indicator = c("Over80M_percm" = "SP.POP.80UP.MA.5Y"), start = 2010, end = 2019)
gdp <- WDI(country = "all", indicator = c("GDP_pcap_ppp" = "NY.GDP.PCAP.PP.CD"), start = 2010, end = 2019)
imports <- WDI(country = "all", indicator = c("Imports_percgdp" = "NE.IMP.GNFS.ZS"), start = 2014, end = 2019)
parttime <- WDI(country = "all", indicator = c("PartTime_perc" = "SL.TLF.PART.ZS"), start = 2014, end = 2019)
salaried <- WDI(country = "all", indicator = c("Salaried_perc" = "SL.EMP.WORK.ZS"), start = 2014, end = 2019)
stats <- WDI(country = "all", indicator = c("StatsCapacity" = "IQ.SCI.OVRL"), start = 2019, end = 2019)
articles <-  WDI(country = "all", indicator = c("SciArticles" = "IP.JRN.ARTC.SC"), start = 2018, end = 2019)
health <- WDI(country = "all", indicator = c("HealthSpend_pcap_ppp" = "SH.XPD.CHEX.PP.CD"), start = 2016, end = 2019)
lifeexp <-  WDI(country = "all", indicator = c("LifeExp" = "SP.DYN.LE00.IN"), start = 2010, end = 2019)
hospitalbeds <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/WHOhospitalbeds.csv", stringsAsFactors = FALSE)
physicians <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/WHOphysicians.csv", stringsAsFactors = FALSE)
hygienehome <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/WHOUNICEFwashhome.csv", na.strings = "-", stringsAsFactors = FALSE)
slums <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/UNMDGslums.csv", stringsAsFactors = FALSE)
poverty <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/UNMDGpoverty.csv", stringsAsFactors = FALSE)
# filter data to complete cases
worldbank <- list(pop, perc65, perc80f, perc80m, lifeexp, gdp, imports, parttime, salaried, stats, articles, health)
worldbank <- lapply(worldbank, function(x) {
x <- x %>% dplyr::filter(complete.cases(.));
x
})
slums <- gather(slums, Year, Slums_perc, -Country)
slums$Year <- gsub("X","" , slums$Year)
slums <- slums %>% dplyr::filter(complete.cases(.))
poverty <- gather(poverty, Year, Poverty_perc, -Country)
poverty$Year <- gsub("X","" , poverty$Year)
poverty <- poverty %>% dplyr::filter(complete.cases(.))
# filter to most recent obs for each country
worldbank <- lapply(worldbank, function(x) {
x <- x %>% group_by(country) %>% slice(which.max(year));
x
})
hospitalbeds <- hospitalbeds %>% group_by(Country) %>% slice(which.max(Year))
physicians <- physicians %>% group_by(Country) %>% slice(which.max(Year))
hygienehome <- hygienehome %>% group_by(Country) %>% slice(which.max(Year))
slums <- slums %>% group_by(Country) %>% slice(which.max(Year))
poverty <- poverty %>% group_by(Country) %>% slice(which.max(Year))
# select variables
worldbank <- lapply(worldbank, function(x) {
x <- select(x, -iso2c, -year);
x
})
hospitalbeds <- select(hospitalbeds, -Year)
physicians <- select(physicians, Country, Medical.doctors..per.10.000.population.)
hygienehome <- select(hygienehome, -Year, -Sl)
slums <- select(slums, -Year)
poverty <- select(poverty, -Year)
# merge each of world bank data, WHO data, MDG data
worldbank <- worldbank %>% reduce(left_join, by = "country")
who <- Reduce(function(x, y) merge(x, y, by = c("Country"), all = TRUE), list(hospitalbeds, physicians, hygienehome))
mdg <- merge(slums, poverty, by = "Country", all = TRUE)
# rename variables
names(worldbank)[1] <- c("Country")
names(who)[2] <- c("HospBed_per10thou")
names(who)[3] <- c("MD_per10thou")
# validate country names
#setdiff(levels(as.factor(covid_cases$Country)), levels(as.factor(worldbank$Country)))
# format world bank country names
worldbank$Country[worldbank$Country == "Bahamas, The"] <- "The Bahamas"
worldbank$Country[worldbank$Country == "Brunei Darussalam"] <- "Brunei"
worldbank$Country[worldbank$Country == "Cabo Verde"] <- "Cape Verde"
worldbank$Country[worldbank$Country == "Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
worldbank$Country[worldbank$Country == "Congo, Rep."] <- "Republic of the Congo"
worldbank$Country[worldbank$Country == "Czech Republic"] <- "Czechia"
worldbank$Country[worldbank$Country == "Egypt, Arab Rep."] <- "Egypt"
worldbank$Country[worldbank$Country == "Gambia, The"] <- "The Gambia"
worldbank$Country[worldbank$Country == "Hong Kong SAR, China"] <- "Hong Kong"
worldbank$Country[worldbank$Country == "Iran, Islamic Rep."] <- "Iran"
worldbank$Country[worldbank$Country == "Korea, Dem. Peopleâ€™s Rep."] <- "North Korea"
worldbank$Country[worldbank$Country == "Korea, Rep."] <- "South Korea"
worldbank$Country[worldbank$Country == "Kyrgyz Republic"] <- "Kyrgyzstan"
worldbank$Country[worldbank$Country == "Lao PDR"] <- "Laos"
worldbank$Country[worldbank$Country == "Macao SAR, China"] <- "Macau"
worldbank$Country[worldbank$Country == "Macedonia, FYR"] <- "North Macedonia"
worldbank$Country[worldbank$Country == "Russian Federation"] <- "Russia"
worldbank$Country[worldbank$Country == "Slovak Republic"] <- "Slovakia"
worldbank$Country[worldbank$Country == "Syrian Arab Republic"] <- "Syria"
worldbank$Country[worldbank$Country == "Venezuela, RB"] <- "Venezuela"
worldbank$Country[worldbank$Country == "Yemen, Rep."] <- "Yemen"
worldbank$Country[worldbank$Country == "West Bank and Gaza"] <- "Palestine"
# validate country names
setdiff(levels(as.factor(covid_cases$Country)), levels(as.factor(worldbank$Country)))
total <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
recovered <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"))
deaths <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
testing <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/testing/covid-testing-all-observations.csv"))
# select, rename testing variables
testing <- select(testing, Entity, Date, "Cumulative total")
names(testing) <- c("Description", "Date", "Tests")
testing <- filter(testing, Description != "United States - inconsistent units (COVID Tracking Project)")
testing <- filter(testing, Description != "Japan - people tested")
# split testing$Entity into Country and Units
newtesting <- colsplit(testing$Description, " - ", names = c("Country", "Units"))
testing <- cbind(testing, newtesting)
# 0 observations to NA
covid_cases <- list(total, recovered, deaths)
covid_cases <- lapply(covid_cases, function(df) {
df[ , c(5:ncol(df))][df[ , c(5:ncol(df))] == 0] <- NA
df
})
# reshape
covid_cases[[1]] <- gather(covid_cases[[1]], Date, Total, -c(1:4))
covid_cases[[2]] <- gather(covid_cases[[2]], Date, Recovered, -c(1:4))
covid_cases[[3]] <- gather(covid_cases[[3]], Date, Deaths, -c(1:4))
# rename variables
covid_cases <- lapply(covid_cases, function(df) {
names(df)[1] <- "Province"
names(df)[2] <- "Country"
df
})
# format variables
covid_cases <- lapply(covid_cases, function(df) {
df$Country[df$Country == "Bahamas, The"] <- "The Bahamas"
df$Country[df$Country == "Bahamas"] <- "The Bahamas"
df$Country[df$Country == "Burma"] <- "Myanmar"
df$Country[df$Country == "Cabo Verde"] <- "Cape Verde"
df$Country[df$Country == "Czech Republic"] <- "Czechia"
df$Country[df$Country == "Congo (Brazzaville)"] <- "Republic of the Congo"
df$Country[df$Country == "Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
df$Country[df$Country == "East Timor"] <- "Timor-Leste"
df$Country[df$Country == "Gambia, The"] <- "The Gambia"
df$Country[df$Country == "Gambia"] <- "The Gambia"
df$Country[df$Country == "Korea, South"] <- "South Korea"
df$Country[df$Country == "Taiwan*"] <- "Taiwan"
df$Country[df$Country == "Saint Lucia"] <- "St. Lucia"
df$Country[df$Country == "Saint Kitts and Nevis"] <- "St. Kitts and Nevis"
df$Country[df$Country == "US"] <- "United States"
df$Country[df$Country == "Saint Vincent and the Grenadines"] <- "St. Vincent and the Grenadines"
df$Province[df$Province == ""] <- NA
df$Country[df$Province == "Macau"] <- "Macau"
df$Province[df$Province == "Macau"] <- NA
df$Country[df$Province == "Hong Kong"] <- "Hong Kong"
df$Province[df$Province == "Hong Kong"] <- NA
df$Country[df$Country == "West Bank and Gaza"] <- "Palestine"
df$Date <- as.Date(df$Date, "%m/%d/%y")
df
})
testing$Date <- as.Date(testing$Date, "%Y-%m-%d")
# summarize by country
covid_cases[[1]] <- aggregate(data = covid_cases[[1]], Total ~ Country + Date, sum, drop = FALSE)
covid_cases[[2]] <- aggregate(data = covid_cases[[2]], Recovered ~ Country + Date, sum, drop = FALSE)
covid_cases[[3]] <- aggregate(data = covid_cases[[3]], Deaths ~ Country + Date, sum, drop = FALSE)
# keep complete cases
covid_cases <- lapply(covid_cases, function(df) {
df <- df[complete.cases(df), ]
df
})
# merge covid_cases
covid_cases <- covid_cases %>% reduce(left_join, by = c("Country", "Date"))
# merge covid_cases and testing on Country and Date
covid_cases <- merge(covid_cases, testing, by = c("Country", "Date"), all = TRUE)
levels(as.factor(covid_cases$Country))
levels(as.factor(testing$Country))
testing$Country[testing$Country == "Czech Republic"] <- "Czechia"
total <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
recovered <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"))
deaths <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
testing <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/testing/covid-testing-all-observations.csv"))
testing <- select(testing, Entity, Date, "Cumulative total")
names(testing) <- c("Description", "Date", "Tests")
testing <- filter(testing, Description != "United States - inconsistent units (COVID Tracking Project)")
testing <- filter(testing, Description != "Japan - people tested")
# split testing$Entity into Country and Units
newtesting <- colsplit(testing$Description, " - ", names = c("Country", "Units"))
testing <- cbind(testing, newtesting)
# 0 observations to NA
covid_cases <- list(total, recovered, deaths)
covid_cases <- lapply(covid_cases, function(df) {
df[ , c(5:ncol(df))][df[ , c(5:ncol(df))] == 0] <- NA
df
})
# reshape
covid_cases[[1]] <- gather(covid_cases[[1]], Date, Total, -c(1:4))
covid_cases[[2]] <- gather(covid_cases[[2]], Date, Recovered, -c(1:4))
covid_cases[[3]] <- gather(covid_cases[[3]], Date, Deaths, -c(1:4))
# rename variables
covid_cases <- lapply(covid_cases, function(df) {
names(df)[1] <- "Province"
names(df)[2] <- "Country"
df
})
# format variables
covid_cases <- lapply(covid_cases, function(df) {
df$Country[df$Country == "Bahamas, The"] <- "The Bahamas"
df$Country[df$Country == "Bahamas"] <- "The Bahamas"
df$Country[df$Country == "Burma"] <- "Myanmar"
df$Country[df$Country == "Cabo Verde"] <- "Cape Verde"
df$Country[df$Country == "Czech Republic"] <- "Czechia"
df$Country[df$Country == "Congo (Brazzaville)"] <- "Republic of the Congo"
df$Country[df$Country == "Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
df$Country[df$Country == "East Timor"] <- "Timor-Leste"
df$Country[df$Country == "Gambia, The"] <- "The Gambia"
df$Country[df$Country == "Gambia"] <- "The Gambia"
df$Country[df$Country == "Korea, South"] <- "South Korea"
df$Country[df$Country == "Taiwan*"] <- "Taiwan"
df$Country[df$Country == "Saint Lucia"] <- "St. Lucia"
df$Country[df$Country == "Saint Kitts and Nevis"] <- "St. Kitts and Nevis"
df$Country[df$Country == "US"] <- "United States"
df$Country[df$Country == "Saint Vincent and the Grenadines"] <- "St. Vincent and the Grenadines"
df$Province[df$Province == ""] <- NA
df$Country[df$Province == "Macau"] <- "Macau"
df$Province[df$Province == "Macau"] <- NA
df$Country[df$Province == "Hong Kong"] <- "Hong Kong"
df$Province[df$Province == "Hong Kong"] <- NA
df$Country[df$Country == "West Bank and Gaza"] <- "Palestine"
df$Date <- as.Date(df$Date, "%m/%d/%y")
df
})
testing$Date <- as.Date(testing$Date, "%Y-%m-%d")
testing$Country[testing$Country == "Czech Republic"] <- "Czechia"
# summarize by country
covid_cases[[1]] <- aggregate(data = covid_cases[[1]], Total ~ Country + Date, sum, drop = FALSE)
covid_cases[[2]] <- aggregate(data = covid_cases[[2]], Recovered ~ Country + Date, sum, drop = FALSE)
covid_cases[[3]] <- aggregate(data = covid_cases[[3]], Deaths ~ Country + Date, sum, drop = FALSE)
# keep complete cases
covid_cases <- lapply(covid_cases, function(df) {
df <- df[complete.cases(df), ]
df
})
# merge covid_cases
covid_cases <- covid_cases %>% reduce(left_join, by = c("Country", "Date"))
# merge covid_cases and testing on Country and Date
covid_cases <- merge(covid_cases, testing, by = c("Country", "Date"), all = TRUE)
# load data
pop <-  WDI(country = "all", indicator = c("Population" = "SP.POP.TOTL"), start = 2010, end = 2019)
perc65 <-  WDI(country = "all", indicator = c("Over65_perc" = "SP.POP.65UP.TO.ZS"), start = 2010, end = 2019)
perc80f <-  WDI(country = "all", indicator = c("Over80F_percf" = "SP.POP.80UP.FE.5Y"), start = 2010, end = 2019)
perc80m <-  WDI(country = "all", indicator = c("Over80M_percm" = "SP.POP.80UP.MA.5Y"), start = 2010, end = 2019)
gdp <- WDI(country = "all", indicator = c("GDP_pcap_ppp" = "NY.GDP.PCAP.PP.CD"), start = 2010, end = 2019)
imports <- WDI(country = "all", indicator = c("Imports_percgdp" = "NE.IMP.GNFS.ZS"), start = 2014, end = 2019)
parttime <- WDI(country = "all", indicator = c("PartTime_perc" = "SL.TLF.PART.ZS"), start = 2014, end = 2019)
salaried <- WDI(country = "all", indicator = c("Salaried_perc" = "SL.EMP.WORK.ZS"), start = 2014, end = 2019)
stats <- WDI(country = "all", indicator = c("StatsCapacity" = "IQ.SCI.OVRL"), start = 2019, end = 2019)
articles <-  WDI(country = "all", indicator = c("SciArticles" = "IP.JRN.ARTC.SC"), start = 2018, end = 2019)
health <- WDI(country = "all", indicator = c("HealthSpend_pcap_ppp" = "SH.XPD.CHEX.PP.CD"), start = 2016, end = 2019)
lifeexp <-  WDI(country = "all", indicator = c("LifeExp" = "SP.DYN.LE00.IN"), start = 2010, end = 2019)
hospitalbeds <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/WHOhospitalbeds.csv", stringsAsFactors = FALSE)
physicians <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/WHOphysicians.csv", stringsAsFactors = FALSE)
hygienehome <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/WHOUNICEFwashhome.csv", na.strings = "-", stringsAsFactors = FALSE)
slums <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/UNMDGslums.csv", stringsAsFactors = FALSE)
poverty <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/UNMDGpoverty.csv", stringsAsFactors = FALSE)
# filter data to complete cases
worldbank <- list(pop, perc65, perc80f, perc80m, lifeexp, gdp, imports, parttime, salaried, stats, articles, health)
worldbank <- lapply(worldbank, function(x) {
x <- x %>% dplyr::filter(complete.cases(.));
x
})
slums <- gather(slums, Year, Slums_perc, -Country)
slums$Year <- gsub("X","" , slums$Year)
slums <- slums %>% dplyr::filter(complete.cases(.))
poverty <- gather(poverty, Year, Poverty_perc, -Country)
poverty$Year <- gsub("X","" , poverty$Year)
poverty <- poverty %>% dplyr::filter(complete.cases(.))
# filter to most recent obs for each country
worldbank <- lapply(worldbank, function(x) {
x <- x %>% group_by(country) %>% slice(which.max(year));
x
})
hospitalbeds <- hospitalbeds %>% group_by(Country) %>% slice(which.max(Year))
physicians <- physicians %>% group_by(Country) %>% slice(which.max(Year))
hygienehome <- hygienehome %>% group_by(Country) %>% slice(which.max(Year))
slums <- slums %>% group_by(Country) %>% slice(which.max(Year))
poverty <- poverty %>% group_by(Country) %>% slice(which.max(Year))
# select variables
worldbank <- lapply(worldbank, function(x) {
x <- select(x, -iso2c, -year);
x
})
hospitalbeds <- select(hospitalbeds, -Year)
physicians <- select(physicians, Country, Medical.doctors..per.10.000.population.)
hygienehome <- select(hygienehome, -Year, -Sl)
slums <- select(slums, -Year)
poverty <- select(poverty, -Year)
# merge each of world bank data, WHO data, MDG data
worldbank <- worldbank %>% reduce(left_join, by = "country")
who <- Reduce(function(x, y) merge(x, y, by = c("Country"), all = TRUE), list(hospitalbeds, physicians, hygienehome))
mdg <- merge(slums, poverty, by = "Country", all = TRUE)
# rename variables
names(worldbank)[1] <- c("Country")
names(who)[2] <- c("HospBed_per10thou")
names(who)[3] <- c("MD_per10thou")
worldbank$Country[worldbank$Country == "Bahamas, The"] <- "The Bahamas"
worldbank$Country[worldbank$Country == "Brunei Darussalam"] <- "Brunei"
worldbank$Country[worldbank$Country == "Cabo Verde"] <- "Cape Verde"
worldbank$Country[worldbank$Country == "Congo, Dem. Rep."] <- "Democratic Republic of the Congo"
worldbank$Country[worldbank$Country == "Congo, Rep."] <- "Republic of the Congo"
worldbank$Country[worldbank$Country == "Czech Republic"] <- "Czechia"
worldbank$Country[worldbank$Country == "Egypt, Arab Rep."] <- "Egypt"
worldbank$Country[worldbank$Country == "Gambia, The"] <- "The Gambia"
worldbank$Country[worldbank$Country == "Hong Kong SAR, China"] <- "Hong Kong"
worldbank$Country[worldbank$Country == "Iran, Islamic Rep."] <- "Iran"
worldbank$Country[worldbank$Country == "Korea, Dem. Peopleâ€™s Rep."] <- "North Korea"
worldbank$Country[worldbank$Country == "Korea, Rep."] <- "South Korea"
worldbank$Country[worldbank$Country == "Kyrgyz Republic"] <- "Kyrgyzstan"
worldbank$Country[worldbank$Country == "Lao PDR"] <- "Laos"
worldbank$Country[worldbank$Country == "Macao SAR, China"] <- "Macau"
worldbank$Country[worldbank$Country == "Macedonia, FYR"] <- "North Macedonia"
worldbank$Country[worldbank$Country == "Russian Federation"] <- "Russia"
worldbank$Country[worldbank$Country == "Slovak Republic"] <- "Slovakia"
worldbank$Country[worldbank$Country == "Syrian Arab Republic"] <- "Syria"
worldbank$Country[worldbank$Country == "Venezuela, RB"] <- "Venezuela"
worldbank$Country[worldbank$Country == "Yemen, Rep."] <- "Yemen"
worldbank$Country[worldbank$Country == "West Bank and Gaza"] <- "Palestine"
# validate country names
setdiff(levels(as.factor(covid_cases$Country)), levels(as.factor(worldbank$Country)))
# add worldbank supplement csv
worldbank <- ungroup(worldbank)
worldbank_supp <- read.csv("data/worldbank_supplement.csv", stringsAsFactors = FALSE)
worldbank <- rbind(worldbank, worldbank_supp)
# validate country names
setdiff(levels(as.factor(covid_cases$Country)), levels(as.factor(worldbank$Country)))
who$Country[who$Country == "Bahamas"] <- "The Bahamas"
who$Country[who$Country == "Bolivia (Plurinational State of)"] <- "Bolivia"
who$Country[who$Country == "Brunei Darussalam"] <- "Brunei"
who$Country[who$Country == "Cabo Verde"] <- "Cape Verde"
who$Country[who$Country == "Congo"] <- "Democratic Republic of the Congo"
who$Country[who$Country == "CÃ´te d'Ivoire"] <- "Cote d'Ivoire"
who$Country[who$Country == "Democratic People's Republic of Korea"] <- "North Korea"
who$Country[who$Country == "Gambia"] <- "The Gambia"
who$Country[who$Country == "Iran (Islamic Republic of)"] <- "Iran"
who$Country[who$Country == "Lao People's Democratic Republic"] <- "Laos"
who$Country[who$Country == "Republic of Korea"] <- "South Korea"
who$Country[who$Country == "Republic of Moldova"] <- "Moldova"
who$Country[who$Country == "Republic of North Macedonia"] <- "North Macedonia"
who$Country[who$Country == "Russian Federation"] <- "Russia"
who$Country[who$Country == "Saint Lucia"] <- "St. Lucia"
who$Country[who$Country == "Saint Vincent and the Grenadines"] <- "St. Vincent and the Grenadines"
who$Country[who$Country == "Syrian Arab Republic"] <- "Syria"
who$Country[who$Country == "United Kingdom of Great Britain and Northern Ireland"] <- "United Kingdom"
who$Country[who$Country == "United Republic of Tanzania"] <- "Tanzania"
who$Country[who$Country == "United States of America"] <- "United States"
who$Country[who$Country == "Venezuela (Bolivarian Republic of)"] <- "Venezuela"
who$Country[who$Country == "Viet Nam"] <- "Vietnam"
# validate country names
setdiff(levels(as.factor(covid_cases$Country)), levels(as.factor(who$Country)))
levels(as.factor(who$Country))
# validate country names
setdiff(levels(as.factor(covid_cases$Country)), levels(as.factor(who$Country)))
who$Country[who$Country == "Bahamas"] <- "The Bahamas"
who$Country[who$Country == "Bolivia (Plurinational State of)"] <- "Bolivia"
who$Country[who$Country == "Brunei Darussalam"] <- "Brunei"
who$Country[who$Country == "Cabo Verde"] <- "Cape Verde"
who$Country[who$Country == "Congo"] <- "Democratic Republic of the Congo"
who$Country[who$Country == "CÃ´te d'Ivoire"] <- "Cote d'Ivoire"
who$Country[who$Country == "Democratic People's Republic of Korea"] <- "North Korea"
who$Country[who$Country == "Gambia"] <- "The Gambia"
who$Country[who$Country == "Iran (Islamic Republic of)"] <- "Iran"
who$Country[who$Country == "Lao People's Democratic Republic"] <- "Laos"
who$Country[who$Country == "Republic of Korea"] <- "South Korea"
who$Country[who$Country == "Republic of Moldova"] <- "Moldova"
who$Country[who$Country == "Republic of North Macedonia"] <- "North Macedonia"
who$Country[who$Country == "Russian Federation"] <- "Russia"
who$Country[who$Country == "Saint Lucia"] <- "St. Lucia"
who$Country[who$Country == "Saint Kitts and Nevis"] <- "St. Kitts and Nevis"
who$Country[who$Country == "Saint Vincent and the Grenadines"] <- "St. Vincent and the Grenadines"
who$Country[who$Country == "Syrian Arab Republic"] <- "Syria"
who$Country[who$Country == "United Kingdom of Great Britain and Northern Ireland"] <- "United Kingdom"
who$Country[who$Country == "United Republic of Tanzania"] <- "Tanzania"
who$Country[who$Country == "United States of America"] <- "United States"
who$Country[who$Country == "Venezuela (Bolivarian Republic of)"] <- "Venezuela"
who$Country[who$Country == "Viet Nam"] <- "Vietnam"
# validate country names
setdiff(levels(as.factor(covid_cases$Country)), levels(as.factor(who$Country)))
mdg$Country[mdg$Country == "Cabo Verde"] <- "Cape Verde"
mdg$Country[mdg$Country == "Congo"] <- "Democratic Republic of the Congo"
mdg$Country[mdg$Country == "Czech Republic"] <- "Czechia"
mdg$Country[mdg$Country == "Gambia"] <- "The Gambia"
mdg$Country[mdg$Country == "Lao People's Democratic Republic"] <- "Laos"
mdg$Country[mdg$Country == "Republic of Moldova"] <- "Moldova"
mdg$Country[mdg$Country == "Russian Federation"] <- "Russia"
mdg$Country[mdg$Country == "Saint Lucia"] <- "St. Lucia"
mdg$Country[mdg$Country == "State of Palestine"] <- "Palestine"
mdg$Country[mdg$Country == "Syrian Arab Republic"] <- "Syria"
mdg$Country[mdg$Country == "Swaziland"] <- "Eswatini"
mdg$Country[mdg$Country == "United Republic of Tanzania"] <- "Tanzania"
mdg$Country[mdg$Country == "The former Yugoslav Republic of Macedonia"] <- "North Macedonia"
mdg$Country[mdg$Country == "Viet Nam"] <- "Vietnam"
levels(as.factor(mdg$Country))
# validate country names
setdiff(levels(as.factor(covid_cases$Country)), levels(as.factor(mdg$Country)))
mdg <- ungroup(mdg)
mdg_supp <- read.csv("data/mdg_supplement.csv", stringsAsFactors = FALSE)
mdg <- rbind(mdg, mdg_supp)
# merge world bank, WHO, and mdg data
worldstats <- Reduce(function(x, y) merge(x, y, by = c("Country"), all = TRUE), list(worldbank, who, mdg))
# clean up hygiene character + number combinations
worldstats[ , 16:24][worldstats[ , 16:24] == "<1"] <- "0"
worldstats[ , 16:24][worldstats[ , 16:24] == ">99"] <- "100"
# reorder variables
worldstats <- worldstats[ , c(1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 26, 11, 12, 13, 6, 14, 15, 16:24)]
# write csv
# write csv
write.csv(worldstats, "/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/worldstats.csv", row.names = FALSE)
rm(list=ls())
slums <- read.csv("/data/UNMDGslums.csv", stringsAsFactors = FALSE)
total <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
recovered <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"))
deaths <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
testing <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/testing/covid-testing-all-observations.csv"))
worldstats <- read.csv("/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/data/worldstats.csv")
# select, rename testing variables
testing <- select(testing, Entity, Date, "Cumulative total")
names(testing) <- c("Description", "Date", "Tests")
testing <- filter(testing, Description != "United States - inconsistent units (COVID Tracking Project)")
testing <- filter(testing, Description != "Japan - people tested")
# split testing$Entity into Country and Units
newtesting <- colsplit(testing$Description, " - ", names = c("Country", "Units"))
testing <- cbind(testing, newtesting)
# 0 observations to NA
covid_cases <- list(total, recovered, deaths)
covid_cases <- lapply(covid_cases, function(df) {
df[ , c(5:ncol(df))][df[ , c(5:ncol(df))] == 0] <- NA
df
})
# reshape
covid_cases[[1]] <- gather(covid_cases[[1]], Date, Total, -c(1:4))
covid_cases[[2]] <- gather(covid_cases[[2]], Date, Recovered, -c(1:4))
covid_cases[[3]] <- gather(covid_cases[[3]], Date, Deaths, -c(1:4))
# rename variables
covid_cases <- lapply(covid_cases, function(df) {
names(df)[1] <- "Province"
names(df)[2] <- "Country"
df
})
# format variables
covid_cases <- lapply(covid_cases, function(df) {
df$Country[df$Country == "Bahamas, The"] <- "The Bahamas"
df$Country[df$Country == "Bahamas"] <- "The Bahamas"
df$Country[df$Country == "Burma"] <- "Myanmar"
df$Country[df$Country == "Cabo Verde"] <- "Cape Verde"
df$Country[df$Country == "Czech Republic"] <- "Czechia"
df$Country[df$Country == "Congo (Brazzaville)"] <- "Republic of the Congo"
df$Country[df$Country == "Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
df$Country[df$Country == "East Timor"] <- "Timor-Leste"
df$Country[df$Country == "Gambia, The"] <- "The Gambia"
df$Country[df$Country == "Gambia"] <- "The Gambia"
df$Country[df$Country == "Korea, South"] <- "South Korea"
df$Country[df$Country == "Taiwan*"] <- "Taiwan"
df$Country[df$Country == "Saint Lucia"] <- "St. Lucia"
df$Country[df$Country == "Saint Kitts and Nevis"] <- "St. Kitts and Nevis"
df$Country[df$Country == "US"] <- "United States"
df$Country[df$Country == "Saint Vincent and the Grenadines"] <- "St. Vincent and the Grenadines"
df$Province[df$Province == ""] <- NA
df$Country[df$Province == "Macau"] <- "Macau"
df$Province[df$Province == "Macau"] <- NA
df$Country[df$Province == "Hong Kong"] <- "Hong Kong"
df$Province[df$Province == "Hong Kong"] <- NA
df$Country[df$Country == "West Bank and Gaza"] <- "Palestine"
df$Date <- as.Date(df$Date, "%m/%d/%y")
df
})
testing$Date <- as.Date(testing$Date, "%Y-%m-%d")
testing$Country[testing$Country == "Czech Republic"] <- "Czechia"
# summarize by country
covid_cases[[1]] <- aggregate(data = covid_cases[[1]], Total ~ Country + Date, sum, drop = FALSE)
covid_cases[[2]] <- aggregate(data = covid_cases[[2]], Recovered ~ Country + Date, sum, drop = FALSE)
covid_cases[[3]] <- aggregate(data = covid_cases[[3]], Deaths ~ Country + Date, sum, drop = FALSE)
# keep complete cases
covid_cases <- lapply(covid_cases, function(df) {
df <- df[complete.cases(df), ]
df
})
# merge covid_cases
covid_cases <- covid_cases %>% reduce(left_join, by = c("Country", "Date"))
# merge covid_cases and testing on Country and Date
covid_cases <- merge(covid_cases, testing, by = c("Country", "Date"), all = TRUE)
# add DayCount variable
covid_cases <- covid_cases %>% group_by(Country) %>% mutate(DayCount = row_number())
# add Day variable (day 1 = the first day a country has at least 100 cases)
Day_dat <- covid_cases %>% group_by(Country) %>% filter(Total >= 100) %>% mutate(Day = row_number())
covid_cases <- merge(covid_cases, Day_dat, all = TRUE)
# add NewCases variable
covid_cases <- covid_cases %>% group_by(Country) %>% mutate(NewCases = Total - lag(Total, default = first(Total)))
# add NewDeaths variable
covid_cases <- covid_cases %>% group_by(Country) %>% mutate(NewDeaths = Deaths - lag(Deaths, default = first(Deaths)))
# filter countries
worldstats <- filter(worldstats, Country %in% levels(as.factor(covid_cases$Country)))
# merge covid_cases and worldstats
covid_cases <- merge(covid_cases, worldstats, by = c("Country"), all = TRUE)
# add Totalper100_000 variable
covid_cases$Totalper100_000 <- (covid_cases$Total/covid_cases$Population)*100000
# add TotalRate variable
covid_cases$TotalRate <- covid_cases$Total/covid_cases$Population
# add RecoveredRate variable
covid_cases$RecoveredRate <- covid_cases$Recovered/covid_cases$Total
# add DeathRate variable
covid_cases$DeathRate <- covid_cases$Deaths/covid_cases$Total
# add Deathsper100_000 variable
covid_cases$Deathsper100_000 <- (covid_cases$Deaths/covid_cases$Population)*100000
# add Testsper100_000 variable
covid_cases$Testsper100_000 <- (covid_cases$Tests/covid_cases$Population)*100000
# add Population_mil variable
covid_cases$Population_mil <- (covid_cases$Population)/1000000
# remove cruise ships
covid_cases <- filter(covid_cases, Country != "Diamond Princess")
covid_cases <- filter(covid_cases, Country != "MS Zaandam")
# restructuring for app
covid_cases <- covid_cases %>% drop_na(Day)
covid_cases <- select(covid_cases, Country, Day, Date, Testsper100_000, Units, Description, Totalper100_000, DeathRate, Population_mil, Over65_perc, Slums_perc, GDP_pcap_ppp, Salaried_perc, Poverty_perc, StatsCapacity, SciArticles, LifeExp, HospBed_per10thou, MD_per10thou, HygBasic_natperc)
# write csv
write.csv(covid_cases, "/Users/mikaelaspringsteen/Documents/GitHub/counting-covid19/covid_cases.csv", row.names = FALSE)
rm(list=ls())
